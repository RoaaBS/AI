/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project2;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.Point;


public class multi extends javax.swing.JFrame {

   private Shap Shap;
   int country_num;
   boolean classifcation=false;
   boolean RED=false;                        
   boolean BlacK=false;
   boolean Blue_=false;
   boolean Green__=false;
   Drawing Line__;
   int check=0;
   int red1=-1;
    int black1=-1;
    int blue1=-1;
    int green1=-1;
    ArrayList <Float> w1=new ArrayList<>();
    ArrayList <Float> w2=new ArrayList<>();
    ArrayList <Float> country=new ArrayList<>();
    ArrayList <Float> X_MIN=new ArrayList<>();
    ArrayList <Float> X_MAX=new ArrayList<>();
    ArrayList<Integer> countries=new ArrayList<>();
    private ArrayList<Point> Point_;
    
    public multi() {
        initComponents();
        Point_ = new ArrayList<Point>();
         
    }
   
    
  
   @Override
   public void paint(Graphics page)
{
    
     super.paintComponents(page);
      if (Shap != null&&classifcation==false)
       Shap.draw(page);
      if(classifcation)
      { Shap.draw(page);
          Line__.draw(page);
          
      }
      
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        num_of_epoch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        lerarn_rate = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        test = new javax.swing.JButton();
        testing_text = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        epoch = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel2.setText("Countries");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel6.setText("Countries");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 340, 310));

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Black", "Green", "Blue" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 100, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel3.setText("number of epoch:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 190, 30));

        num_of_epoch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_of_epochActionPerformed(evt);
            }
        });
        getContentPane().add(num_of_epoch, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 160, 60, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Learning Rate");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, -1, -1));

        jSlider2.setMajorTickSpacing(1);
        jSlider2.setMaximum(10);
        jSlider2.setPaintTicks(true);
        jSlider2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });
        getContentPane().add(jSlider2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 250, 170, -1));
        getContentPane().add(lerarn_rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 290, 60, 30));

        jButton2.setBackground(new java.awt.Color(255, 0, 51));
        jButton2.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, 120, 30));

        test.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });
        getContentPane().add(test, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 10, 10));

        testing_text.setBackground(new java.awt.Color(233, 230, 230));
        testing_text.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        testing_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testing_textActionPerformed(evt);
            }
        });
        getContentPane().add(testing_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 540, 10, 10));

        jLabel7.setFont(new java.awt.Font("Georgia", 3, 18)); // NOI18N
        jLabel7.setText("Clasess: ");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 90, 30));

        epoch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project2/image3.jpeg"))); // NOI18N
        epoch.setPreferredSize(new java.awt.Dimension(553, 600));
        getContentPane().add(epoch, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 560));

        jButton1.setText("jButton1");
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 390, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
String result;


    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        Shap = new Shap(evt.getPoint(),country_num,check);
        repaint();
        if(check==1)
        {if(country_num==0)
                result="Red Square ";
            if(country_num==1)
                result="Black Circle ";
            if(country_num==2)
                result="Green Tringle";
            if(country_num==3)
                result="Blue pentagon ";
             int red = 0;
            int black = 0;
             int green = 0;
             int blue = 0;
            if(countries.contains(0))
             red=Region(0,(int) evt.getPoint().getY()+50, (int)evt.getPoint().getX()+25);
            if(countries.contains(1))
             black=Region(1,(int) evt.getPoint().getY()+50, (int)evt.getPoint().getX()+25);
            if(countries.contains(2))
             green=Region(2,(int) evt.getPoint().getY()+50, (int)evt.getPoint().getX()+25);
            if(countries.contains(3))
             blue=Region(3,(int) evt.getPoint().getY()+50, (int)evt.getPoint().getX()+25);
            if((red+black+green+blue)==1)
            { if(red==1) testing_text.setText(result+"in Red Region");
             if(blue==1) testing_text.setText(result+"in Blue Region");
             if(black==1)testing_text.setText(result+"in Black Region");
             if(green==1)testing_text.setText(result+"in Green Region");
            }
            else testing_text.setText(result+ "in no Region");
           }  
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       country_num=jComboBox1.getSelectedIndex();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void num_of_epochActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_of_epochActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_num_of_epochActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        float a=(float) (jSlider2.getValue()/10.0);
        lerarn_rate.setText(String.valueOf(a));
    }//GEN-LAST:event_jSlider2StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ArrayList<Point> trainingPoints = Shap.getarraypoints();
    ArrayList<Integer> classes = Shap.getcolors();
    Point_ = trainingPoints;
    countries = classes;
    
    // Iterate over the classes to perform the train() operation based on the condition
    for (int classLabel = 0; classLabel < countries.size(); classLabel++) {
        if (countries.contains(classLabel)) {
            train(trainingPoints, classes, classLabel);
        }
    }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
       check=1;
       Divv();
    }//GEN-LAST:event_testActionPerformed

    private void testing_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testing_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testing_textActionPerformed

  
    public void train(ArrayList<Point> Trainning_,ArrayList<Integer> c,int num_color)
        {
        if(num_of_epoch.getText().isEmpty() || lerarn_rate.getText().isEmpty() ){
            JFrame f=new JFrame(); 
               JOptionPane.showMessageDialog(f,"Epoch and alpa coudn't be empty","Alert",JOptionPane.WARNING_MESSAGE); }
        int epochh=Integer.parseInt(num_of_epoch.getText());
        float alpha=Float.parseFloat(lerarn_rate.getText());
        float W1=Wieghtt_();
        float W2=Wieghtt_();
        float threshold=Wieghtt_();
        ArrayList<Float> errors=new ArrayList<>();
        float MIN___x1=MIN_FUN(Trainning_,0);
        float MAX__x2=MAX_FUNC(Trainning_,0);
        float MIN___y=MIN_FUN(Trainning_,1);
        float MAX__y=MAX_FUNC(Trainning_,1);
        for(int i=0;i<epochh;i++)
        {   errors.clear();
            for(int j=0;j<Trainning_.size();j++)
            {   float x1=normalize((float) Trainning_.get(j).getX(), MIN___x1, MAX__x2);
                float x2=normalize((float)Trainning_.get(j).getY(), MIN___y, MAX__y);
                float bigX=((x1*W1)+(x2*W2))-threshold;
                float ya=STEP_func(bigX);
                float m=0;
                if(c.get(j)==num_color)     
                     m=1; //sam
                else m=0;
                float error=m-ya;
                errors.add(error);
                float d_w1=alpha*x1*error;
                float d_w2=alpha*x2*error;
                W1=W1+d_w1;
                W2=W2+d_w2;
            }
            boolean f=false;
             f=ferror(errors);
             if(f)
               break;}
        System.out.println("New Weights" + W1+"   "+W2);
        classifcation=true;
        float x_1=(threshold-(0*W1))/(W2-0);
         x_1=x_1*350;
        float x_2=(threshold-(1*W1))/(W2-0);
        x_2=x_2*350;
        System.out.println("New Line coordanates"+x_1+ "  "+ x_2);
        Line__=new Drawing(20, (int)x_1, 350,(int)x_2);
        repaint();
        if((num_color==0&&red1==-1)||(num_color==1&&black1==-1)||(num_color==2&&green1==-1)||(num_color==3&&blue1==-1))
          { Line__.x1point.add(20);
            Line__.x2point.add(200);
            Line__.y1point.add((int)x_1);
            Line__.y2point.add((int)x_2);
            w1.add(x_1);
            w2.add(x_2);
            country.add(threshold);
            X_MIN.add(MIN___x1);
            X_MAX.add(MAX__x2);
            Line__.classifingarray.add(num_color);
             if(num_color==0) red1++;
            if(num_color==1)black1++;
            if(num_color==2)green1++;
            if(num_color==3)blue1++;
            }
             else
             {  int index=Line__.classifingarray.indexOf(num_color);
                Line__.x1point.remove(index);
                Line__.x2point.remove(index);
                Line__.y2point.remove(index);
                Line__.y1point.remove(index);
                w1.remove(index);
                w2.remove(index);
                country.remove(index);
                X_MIN.remove(index);
                X_MAX.remove(index);
                country.add(index, threshold);
                Line__.x1point.add(index, 20);
                Line__.x2point.add(index, 343);
                Line__.y2point.add(index, (int)x_2);
                Line__.y1point.add(index, (int)x_1);
                w1.add(index,W1);
                w2.add(index,W2);
                X_MIN.add(index, MIN___x1);
                X_MAX.add(index, MAX__x2);}
    }     
    public float Wieghtt_()
        {int MAX_,MIN__,rmI;
     float FNum;
     Random r = new Random();
      MAX_ = (int)(0.5/0.01);
      MIN__ = (int)(-0.5/0.01);
     rmI = r.nextInt((MAX_ - MIN__) + 1) + MIN__;
     FNum = (float) (rmI * 0.01);
    return FNum;
    }
    public float MIN_FUN(ArrayList<Point> Trainning_,int x)
        {    // MIN__x==>x=0 MIN__ y==> x=1
       float MIN__=Float.MAX_VALUE;
       if(x==1){
       for(int i=0;i<Trainning_.size();i++)
       {
         if(Trainning_.get(i).getY()<MIN__)  
             MIN__=(float) Trainning_.get(i).getY();
       }}
       else{
            for(int i=0;i<Trainning_.size();i++)
       {
         if(Trainning_.get(i).getX()<MIN__)  
             MIN__=(float) Trainning_.get(i).getX();
       }
       }
       
       return MIN__;
       }
    public float MAX_FUNC(ArrayList<Point> Trainning_,int z)
        { // MAX_x==>x=0 MAX_ y==> x=1
       float MAX_=Float.MIN_VALUE;
        if(z==1){
       for(int i=0;i<Trainning_.size();i++)
       {
         if(Trainning_.get(i).getY()>MAX_)  
             MAX_=(float) Trainning_.get(i).getY();
       }}
        else{
             for(int i=0;i<Trainning_.size();i++)
       {
         if(Trainning_.get(i).getX()>MAX_)  
             MAX_=(float) Trainning_.get(i).getX();
       }
        }
       return MAX_;
       
   }
    public float normalize(float x ,float MIN__,float MAX_)
        {
        float AB=(float) ((float) (x-MIN__)*(1.0/(MAX_-MIN__)));
        return AB;
    }
    public int STEP_func (float P)
        {if(P<=0) return 0;
        else return 1;
         }
     public boolean ferror(ArrayList<Float> x)
        {   float Sum=0;
        for (int i=0;i<x.size();i++)
        {
            Sum= ((float)(Math.pow(x.get(i), 2))+Sum);
        }
        Sum=Sum/(float)Shap.getarraypoints().size();
         if(Sum<=0.001)return true;
         else return false; }
    public int Region(int Color_num,float y,float x)
        {   boolean Q = false;
        if(Color_num==0)
            Q=RED;
        if(Color_num==1)
            Q=BlacK;
        if(Color_num==2)
            Q=Green__;
        if(Color_num==3)
            Q=Blue_;
        int index=Line__.classifingarray.indexOf(Color_num);
        float W_1=w1.get(index);
        float W_2=w2.get(index);
        x= normalize(x, X_MIN.get(index), X_MAX.get(index));
        float Y_actual=(country.get(index)-(x*W_1))/(W_2-0);
        Y_actual=Y_actual*366;
        if(Y_actual<y){ 
            if(Q){return 1;}
                else return 0;
                 }
        else 
            if(Y_actual>y)
                 {  if(!Q){return 1;}
                    else return 0;
                 }
    return 0;
    }
    public void Divv()           ////function Div
    {
        int red=0;  int black=0; int blue=0; int green=0;
        int c1=0;  int cdown1=0;  int cup2=0;  int cdown2=0;
        int c3=0;  int cdown3=0;  int cup4=0;  int cdown4=0;
       for(int i=0;i<Point_.size();i++)
        {
            if(countries.get(i)==0)
            {
                red++;
                int index=Line__.classifingarray.indexOf(0);
                float W_1=w1.get(index);
                float W_2=w2.get(index);
                float xX_MIN=X_MIN.get(index);
                float xX_MAX=X_MAX.get(index);
                Point point=Point_.get(i);
                float x= (float) point.getX();
                x= normalize(x, xX_MIN, xX_MAX);
                int y=(int) point.getY();
                float Y_actualtualL=(country.get(index)-(x*W_1))/(W_2-0);
                Y_actualtualL=Y_actualtualL*350;
                if(Y_actualtualL<y) c1++;
                else cdown1++;
            }
             if(countries.get(i)==1)
            {
                black++;
                 int index=Line__.classifingarray.indexOf(1);
                  float W_1=w1.get(index);
                 float W_2=w2.get(index);
                 float xX_MIN=X_MIN.get(index);
                 float xX_MAX=X_MAX.get(index);
                 Point point=Point_.get(i);
                float x= (float) point.getX();
                 x= normalize(x, xX_MIN, xX_MAX);
                 int y=(int) point.getY();
                 float Y_actualtualL=(country.get(index)-(x*W_1))/(W_2-0);
                 Y_actualtualL=Y_actualtualL*350;
                 if(Y_actualtualL<y)cup2++;
                 else cdown2++;
            }
            if(countries.get(i)==2)
            {
                green++;
                 int index=Line__.classifingarray.indexOf(2);
                   float W_1=w1.get(index);
                 float W_2=w2.get(index);
                 float xX_MIN=X_MIN.get(index);
                 float xX_MAX=X_MAX.get(index);
                 Point point=Point_.get(i);
                float x= (float) point.getX();
                 x= normalize(x, xX_MIN, xX_MAX);
                 int y=(int) point.getY();
                 float Y_actualtualL=(country.get(index)-(x*W_1))/(W_2-0);
                 Y_actualtualL=Y_actualtualL*350;
                 if(Y_actualtualL<y)c3++;
                 else cdown3++;
            }
            if(countries.get(i)==3)
            {
                blue++;
                 int index=Line__.classifingarray.indexOf(3);
                 float W_1=w1.get(index);
                 float W_2=w2.get(index);
                 float xX_MIN=X_MIN.get(index);
                 float xX_MAX=X_MAX.get(index);
                 Point point=Point_.get(i);
                 float x= (float) point.getX();
                 x= normalize(x, xX_MIN, xX_MAX);
                 int y=(int) point.getY();
                 float Y_actualtualL=(country.get(index)-(x*W_1))/(W_2-0);
                 Y_actualtualL=Y_actualtualL*350;
                 if(Y_actualtualL<y)cup4++;
                 else cdown4++;
            }
        }
        
        if(c1>cdown1)RED=true;
            else RED=false;
        if(cup2>cdown2)BlacK=true;
            else BlacK=false;
        if(c3>cdown3)Green__=true;
            else Green__=false;
        if(cup4>cdown4)Blue_=true;
            else Blue_=false;
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel epoch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTextField lerarn_rate;
    private javax.swing.JTextField num_of_epoch;
    private javax.swing.JButton test;
    private javax.swing.JTextField testing_text;
    // End of variables declaration//GEN-END:variables
}
